<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction on My New Hugo Site</title>
    <link>https://noweaver.github.io/</link>
    <description>Recent content in Introduction on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://noweaver.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Creating a New Theme</title>
      <link>https://noweaver.github.io/posts/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://noweaver.github.io/posts/creating-a-new-theme/</guid>
      <description>Introduction 동해물과 백두산이
This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&#39;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&#39;t cover using CSS to style your theme.
We&#39;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>https://noweaver.github.io/posts/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://noweaver.github.io/posts/migrate-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png  should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you&#39;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
    <item>
      <title>Hugo 블로그 생성</title>
      <link>https://noweaver.github.io/posts/05-14-Hugo-Blog-Installation/</link>
      <pubDate>Tue, 14 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://noweaver.github.io/posts/05-14-Hugo-Blog-Installation/</guid>
      <description>이 블로그는 Golang 기반의 정적 블로그 엔진 Hugo를 기반으로 만들었다. 매뉴얼을 보고 했지만 github 으로 디플로이 하는 부분이 가장 이해가 되지 않아 이 블로그를 참조했다. 그러나 이 블로그의 댓글에도 남겼지만, git submodule 등의 명령어가 제대로 먹히지 않아서 그냥 여러 블로그를 참조해서 만들었다. Hugo기반의 블로그를 생성하려면 golang이 설치되어야 한다. Golang 설치 방법을 참고한다.
Hugo 설치 $ brew install hugo $ which hugo /usr/local/bin/hugo $ hugo version Hugo Static Site Generator v0.55.5/extended darwin/amd64 BuildDate: unknown 미리 할 일 Hugo 기반의 블로그를 만들고 GitHub 에 디플로이를 하기 위해서는 두 개의 Repository가 필요하다.</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://noweaver.github.io/posts/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://noweaver.github.io/posts/goisforlovers/</guid>
      <description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://noweaver.github.io/posts/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://noweaver.github.io/posts/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
  </channel>
</rss>